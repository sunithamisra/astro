{"ts":1366853079372,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This is a sample application which you can use as a starting point for your\n// project. The only parts you should *need* to change are indicated with `TODO`\n// below. However, you are welcome to change more if you wish.\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar USER_OR_GROUP_NAME = 'sunithamisra'; \n\n////////////////////////////////////////////////////////////////////////////////\n\nif (! USER_OR_GROUP_NAME) { \n  throw new Error(\n    'You must set your GitHub username or group name in the app.js file'); \n}\n\n// Import some utility functions.\nvar utils = require('./utils');\n\n// Create a new web application.\nvar app = utils.initializeWebApp();\n\n// Connect to your database.\nvar db = utils.connectToDatabase(USER_OR_GROUP_NAME);\n\n// TODO: Start defining your resource handlers. You may just need to modify the\n// examples below, or you may need to add additional handlers by copying,\n// pasting, and modifying these examples.\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling PUT to create or update a resource. /////////////////////\n// Here we create or update an item using the ID specified in the URI. /////////\n////////////////////////////////////////////////////////////////////////////////\napp.put('/parties/:id',      // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n\n    // Get the item info that was PUT from the input form.\n    // See the form in `views/list-parties.ejs`.\n    var item = req.body.item;\n    \n    item.type = 'party'; // TODO: change to the type of item you want\n\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the created/updated item.\n      else { res.send('', { Location: '/parties/' + item_id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling GET of a \"collection\" resource. /////////////////////////\n// Here we list all items of type `party`. /////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/parties/',         // TODO: change to suit your URI design. \n  function(req, res) {\n\n    var item_type = 'party'; // TODO: change to the type of item you want.\n\n    // Get all items of the specified type from the database.\n    db.getAll(item_type, function(err, items) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n\n      // Otherwise, use the returned data to render an HTML page.\n      else {\n        res.render(\n          'list-parties',   // TODO: change to the name of your HTML template.\n          { items: items }\n        );\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling POST to create a resource. //////////////////////////////\n// Here we create an item and allow the ID to be created automatically. ////////\n////////////////////////////////////////////////////////////////////////////////\napp.post('/candidates/', // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item info that was POSTed from the input form.\n    // See the form in `views/one-party.ejs`.\n    var item = req.body.item;\n\n    item.type = 'candidate'; // TODO: change to the type of item you want\n\n    // Save the new item to the database. (No ID specified, it will be created.)\n    db.save(item, function(err, item) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the created item.\n      else { res.send('', { Location: '/candidates/' + item.id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Another example of handling PUT to update a resource. ///////////////////////\n// Here we update an item using the ID specified in the URI. ///////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.put('/candidates/:id', // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n\n    // Get the item info that was PUT from the input form.\n    // See the form in `views/one-candidate.ejs`.\n    var item = req.body.item;\n\n    item.type = 'candidate'; // TODO: change to the type of item you want\n\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the updated item.\n      else { res.send('', { Location: '/candidates/' + item_id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Another example of handling GET of a \"collection\" resource. /////////////////\n// This time we support filtering the list by some criteria (i.e. searching). //\n////////////////////////////////////////////////////////////////////////////////\napp.get('/candidates/',          // TODO: change to suit your URI design. \n  function(req, res) {\n\n    var item_type = 'candidate'; // TODO: change to the type of item you want.\n\n    // Get items of the specified type that match the query.\n    db.getSome(item_type, req.query, function(err, items) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n\n      // Otherwise, use the returned data to render an HTML page.\n      else {\n        res.render(\n          'list-candidates', // TODO: change to the name of your HTML template.\n          { items: items }\n        );\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// An example of handling GET of a \"single\" resource. //////////////////////////\n// This handler is more complicated, because we want to show not only the //////\n// item requested, but also links to a set of related items. ///////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/parties/:id',      // TODO: change to suit your URI design.\n  function(req, res) {\n\n    var item_type = 'party'; // TODO: change to the type of item you want.\n\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n  \n    // Get one item of the specified type, identified by the item ID.\n    db.getOne(item_type, item_id, function(err, item) {\n        \n      // If there was a database error, return an error status.\n      if (err) {\n        if (err.error == 'not_found') { res.send(404); }\n        else { res.send(err, 500); }\n      } \n\n      // Otherwise, get the related items associated with this item.\n      else {\n        \n        var related_type = 'candidate'; // TODO: change to type of related item.\n\n        // Set our query to find the items related to the requested item.\n        req.query.party = item_id; // TODO: change `party` to reflect the\n                                   // relation between the item fetched above\n                                   // and the related items to be fetched below.\n\n        // Get items of the specified type that match the query.\n        db.getSome(related_type, req.query, function(err, items) {\n\n          // If there was a database error, return an error status.\n          if (err) { res.send(err, 500); } \n\n          // Otherwise, use the returned data to render an HTML page.\n          else {\n            res.render(\n            'one-party', // TODO: change to the name of your HTML template.\n              { item: item, related_items: items }\n            );\n          }\n        });\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// An example of handling GET of a \"single\" resource. //////////////////////////\n// This handler is also complicated, because we want to show not only the //////\n// item requested, but also a list of potential related items, so that users ///\n// can select from a list when updating the item. //////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/candidates/:id',       // TODO: change to suit your URI design.\n  function(req, res) {\n\n    var item_type = 'candidate'; // TODO: change to the type of item you want.\n\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n  \n    // Get one item of the specified type, identified by the item ID.\n    db.getOne(item_type, item_id, function(err, item) {\n        \n      // If there was a database error, return an error status.\n      if (err) {\n        if (err.error == 'not_found') { res.send(404); }\n        else { res.send(err, 500); }\n      } \n\n      // Otherwise, get the items potentially related to this item.\n      else {\n        \n        var related_type = 'party'; // TODO: change to type of related item.\n\n        // Get all items of the specified related type.\n        db.getAll(related_type, function(err, items) {\n\n          // If there was a database error, return an error status.\n          if (err) { res.send(err, 500); } \n\n          // Otherwise, use the returned data to render an HTML page.\n          else {\n            res.render(\n              'one-candidate', // TODO: change to name of your HTML template.\n              { item: item, related_items: items }\n            );\n          }\n        });\n      }\n    });\n  }\n);\n\n\n// Handle GET of the \"index\" resource.\napp.get('/', function(req, res) { res.render('index'); });\n\n// Start listening for incoming HTTP connections.\napp.listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":9998}]],"length":9998}
