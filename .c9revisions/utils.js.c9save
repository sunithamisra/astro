{"ts":1366851680452,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Import the Express web framework.\nvar express = require('express');\n\n// Import a library for accessing couchdb.\nvar cradle = require('cradle');\n\nfunction initializeWebApp() {\n  // Create and configure a new web application.\n  var app = express.createServer();\n  // Configure the Express web framework.\n  app.configure(function () {\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'ejs');\n    app.set('view options', { layout: false });\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(app.router);\n    app.use(express.static(__dirname + '/public'));\n    app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n  });\n  return app;\n}\nexports.initializeWebApp = initializeWebApp;\n\nfunction connectToDatabase(name) {\n  if (! name) { throw Error('Must specify database name'); }\n  var host = 'https://sils-webinfo.iriscouch.com/';\n  var port = 443;\n  return new (\n    function(db) {\n      db.exists(function (err, exists) {\n        if (err) { console.log('error', err); } \n        else if (! exists) {\n          db.create();\n          console.log('Created new database.');\n        }      \n      });\n      this.save = function() { \n        var args = arguments;\n        db.save.apply(db, args); \n      };\n      this.filterDocs = function (accept, callback) {\n        var that = this;\n        db.all({ include_docs: true }, function(err, rows) {\n          if (err) { return that.handleErr(err, callback); }\n          var results = [];\n          for (var i = 0; i < rows.length; i++) {\n            var doc = rows[i].doc;\n            if (accept(doc)) {\n              results.push(doc); \n            }\n          }\n          return callback(null, results);\n        });\n      };\n      this.getSome = function(item_type, query, callback) {\n        if (! item_type) { callback('No item type was specified'); }\n        this.filterDocs(function (doc) {\n          if (doc.type !== item_type ) { return false; }\n          for (var prop in query) {\n            if (prop in doc) {\n              if (typeof(query[prop]) == 'string') {\n                if (doc[prop].toLowerCase().indexOf(query[prop].toLowerCase()) < 0) {\n                  return false;\n                } \n              } else {\n                if (doc.doc[prop] !== query[prop]) {\n                  return false;\n                }\n              }\n            }\n          }\n          return true;\n        }, callback);\n      };\n      this.getAll = function(item_type, callback) {\n        if (! item_type) { callback('No item type was specified'); }\n        this.filterDocs(function (doc) { \n          return doc.type === item_type; \n        }, callback);\n      };\n      this.getOne = function(item_type, item_id, callback) {\n        var that = this;\n        db.get(item_id, function(err, doc) {\n          if (err) { return that.handleErr(err, callback); }\n          if (doc.type !== item_type) {\n            return callback({ \n                error: 'not found', \n                reason: 'item ' + item_id + ' is not of type ' + item_type });\n          }\n          return callback(null, doc);\n        });\n      };\n      this.handleErr = function(err, callback) {\n        console.trace();\n        console.error(err);\n        callback(err); \n      };\n    })(new(cradle.Connection)(host, port).database(name));\n}\nexports.connectToDatabase = connectToDatabase;\n\n// Authenticate a user using the HTTP Basic Authentication protocol.\nfunction authenticateUser(db, req, res, next) {\n\n  var parts, auth, scheme, credentials; \n  var view, options;\n  \n  // handle auth stuff\n  auth = req.headers[\"authorization\"];\n  if (!auth){\n    return authRequired(res, 'Microblog');\n  }  \n  \n  parts = auth.split(' ');\n  scheme = parts[0];\n  credentials = new Buffer(parts[1], 'base64').toString().split(':');\n  \n  if ('Basic' != scheme) {\n    return res.send('Unsupported authorization scheme', 400);\n  } \n  req.credentials = credentials;\n\n  // ok, let's look this user up\n  view = 'microblog/users_by_id';\n  \n  options = {};\n  options.descending='true';\n  options.key=req.credentials[0];\n  \n  db.view(view, options, function(err, doc) {\n    try {\n      if(doc[0].value.password===req.credentials[1]) {\n        next(req,res);\n      }\n      else {\n        throw new Error('Invalid User');\n      } \n    }\n    catch (ex) {\n      return authRequired(res, 'Microblog');\n    }\n  });\n}\nexports.authenticateUser = authenticateUser;\n\n// 'Negotiate' content type; i.e. send them what they requested.\nfunction negotiateContentType(req) {\n  switch(req.headers['accept']) {\n    case 'text/xml':\n      return 'text/xml';\n    case 'application/xml':\n      return 'application/xml';\n    case 'application/xhtml+xml':\n      return 'application/xhtml+xml';\n    default:\n      return 'text/html';\n  }\n}\nexports.negotiateContentType = negotiateContentType;\n\n// Get today's date as a y-m-d string.\nfunction today() {\n\n  var y, m, d, dt;\n  \n  dt = new Date();\n\n  y = String(dt.getFullYear());\n  \n  m = String(dt.getMonth()+1);\n  if(m.length===1) {\n    m = '0'+m;\n  }\n\n  d = String(dt.getDate());\n  if(d.length===1) {\n    d = '0'+d.toString();\n  }\n\n  return y+'-'+m+'-'+d;\n}\nexports.today = today;\n\n// Get the current date and time as a string.\nfunction now() {\n  var y, m, d, h, i, s, dt;\n  \n  dt = new Date();\n  \n  y = String(dt.getFullYear());\n  \n  m = String(dt.getMonth()+1);\n  if(m.length===1) {\n    m = '0'+m;\n  }\n\n  d = String(dt.getDate());\n  if(d.length===1) {\n    d = '0'+d.toString();\n  }\n  \n  h = String(dt.getHours()+1);\n  if(h.length===1) {\n    h = '0'+h;\n  }\n  \n  i = String(dt.getMinutes()+1);\n  if(i.length===1) {\n    i = '0'+i;\n  }\n  \n  s = String(dt.getSeconds()+1);\n  if(s.length===1) {\n    s = '0'+s;\n  }\n  return y+'-'+m+'-'+d+' '+h+':'+i+':'+s;\n}\nexports.now = now;\n\n// Return standard 'auth required' response.\nfunction authRequired(res,realm) {\n  var realm = (realm || 'Authentication Required');\n  res.send('Unauthorized', \n    { 'WWW-Authenticate': 'Basic realm=\"' + realm + '\"' }, 401);\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6002}]],"length":6002}
{"contributors":[],"silentsave":false,"ts":1367767527415,"patch":[[{"diffs":[[0,"rgs); \n      };\n"],[1,"      this.remove = function() { \n       var args = arguments;\n        db.remove.apply(db, args); \n      };\n"],[0,"      this.filte"]],"start1":1265,"start2":1265,"length1":32,"length2":140}]],"length":6110,"saved":false}
