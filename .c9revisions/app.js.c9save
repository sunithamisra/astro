{"ts":1366138591761,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This is a sample application which you can use as a starting point for your\n// project. The only parts you should *need* to change are indicated with `TODO`\n// below. However, you are welcome to change more if you wish.\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar USER_OR_GROUP_NAME = 'ryanshaw'; // TODO: Insert GitHub username or group name.\n\n////////////////////////////////////////////////////////////////////////////////\n\nif (! USER_OR_GROUP_NAME) { \n  throw new Error(\n    'You must set your GitHub username or group name in the app.js file'); \n}\n\n// Import some utility functions.\nvar utils = require('./utils');\n\n// Create a new web application.\nvar app = utils.initializeWebApp();\n\n// Connect to your database.\nvar db = utils.connectToDatabase(USER_OR_GROUP_NAME);\n\n// TODO: Start defining your resource handlers. You may just need to modify the\n// examples below, or you may need to add additional handlers by copying,\n// pasting, and modifying these examples.\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling PUT to create or update a resource. /////////////////////\n// Here we create or update an item using the ID specified in the URI. /////////\n////////////////////////////////////////////////////////////////////////////////\napp.put('/parties/:id',      // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n\n    // Get the item info that was PUT from the input form.\n    // See the form in `views/list-parties.ejs`.\n    var item = req.body.item;\n    \n    item.type = 'party'; // TODO: change to the type of item you want\n\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the created/updated item.\n      else { res.send('', { Location: '/parties/' + item_id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling GET of a \"collection\" resource. /////////////////////////\n// Here we list all items of type `party`. /////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/parties/',         // TODO: change to suit your URI design. \n  function(req, res) {\n\n    var item_type = 'party'; // TODO: change to the type of item you want.\n\n    // Get all items of the specified type from the database.\n    db.getAll(item_type, function(err, items) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n\n      // Otherwise, use the returned data to render an HTML page.\n      else {\n        res.render(\n          'list-parties',   // TODO: change to the name of your HTML template.\n          { items: items }\n        );\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Example of handling POST to create a resource. //////////////////////////////\n// Here we create an item and allow the ID to be created automatically. ////////\n////////////////////////////////////////////////////////////////////////////////\napp.post('/candidates/', // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item info that was POSTed from the input form.\n    // See the form in `views/one-party.ejs`.\n    var item = req.body.item;\n\n    item.type = 'candidate'; // TODO: change to the type of item you want\n\n    // Save the new item to the database. (No ID specified, it will be created.)\n    db.save(item, function(err, item) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the created item.\n      else { res.send('', { Location: '/candidates/' + item.id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Another example of handling PUT to update a resource. ///////////////////////\n// Here we update an item using the ID specified in the URI. ///////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.put('/candidates/:id', // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n\n    // Get the item info that was PUT from the input form.\n    // See the form in `views/one-candidate.ejs`.\n    var item = req.body.item;\n\n    item.type = 'candidate'; // TODO: change to the type of item you want\n\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, send back the location of the updated item.\n      else { res.send('', { Location: '/candidates/' + item_id }, 204); }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// Another example of handling GET of a \"collection\" resource. /////////////////\n// This time we support filtering the list by some criteria (i.e. searching). //\n////////////////////////////////////////////////////////////////////////////////\napp.get('/candidates/',          // TODO: change to suit your URI design. \n  function(req, res) {\n\n    var item_type = 'candidate'; // TODO: change to the type of item you want.\n\n    // Get items of the specified type that match the query.\n    db.getSome(item_type, req.query, function(err, items) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n\n      // Otherwise, use the returned data to render an HTML page.\n      else {\n        res.render(\n          'list-candidates', // TODO: change to the name of your HTML template.\n          { items: items }\n        );\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// An example of handling GET of a \"single\" resource. //////////////////////////\n// This handler is more complicated, because we want to show not only the //////\n// item requested, but also links to a set of related items. ///////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/parties/:id',      // TODO: change to suit your URI design.\n  function(req, res) {\n\n    var item_type = 'party'; // TODO: change to the type of item you want.\n\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n  \n    // Get one item of the specified type, identified by the item ID.\n    db.getOne(item_type, item_id, function(err, item) {\n        \n      // If there was a database error, return an error status.\n      if (err) {\n        if (err.error == 'not_found') { res.send(404); }\n        else { res.send(err, 500); }\n      } \n\n      // Otherwise, get the related items associated with this item.\n      else {\n        \n        var related_type = 'candidate'; // TODO: change to type of related item.\n\n        // Set our query to find the items related to the requested item.\n        req.query.party = item_id; // TODO: change `party` to reflect the\n                                   // relation between the item fetched above\n                                   // and the related items to be fetched below.\n\n        // Get items of the specified type that match the query.\n        db.getSome(related_type, req.query, function(err, items) {\n\n          // If there was a database error, return an error status.\n          if (err) { res.send(err, 500); } \n\n          // Otherwise, use the returned data to render an HTML page.\n          else {\n            res.render(\n            'one-party', // TODO: change to the name of your HTML template.\n              { item: item, related_items: items }\n            );\n          }\n        });\n      }\n    });\n  }\n);\n\n////////////////////////////////////////////////////////////////////////////////\n// An example of handling GET of a \"single\" resource. //////////////////////////\n// This handler is also complicated, because we want to show not only the //////\n// item requested, but also a list of potential related items, so that users ///\n// can select from a list when updating the item. //////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\napp.get('/candidates/:id',       // TODO: change to suit your URI design.\n  function(req, res) {\n\n    var item_type = 'candidate'; // TODO: change to the type of item you want.\n\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n  \n    // Get one item of the specified type, identified by the item ID.\n    db.getOne(item_type, item_id, function(err, item) {\n        \n      // If there was a database error, return an error status.\n      if (err) {\n        if (err.error == 'not_found') { res.send(404); }\n        else { res.send(err, 500); }\n      } \n\n      // Otherwise, get the items potentially related to this item.\n      else {\n        \n        var related_type = 'party'; // TODO: change to type of related item.\n\n        // Get all items of the specified related type.\n        db.getAll(related_type, function(err, items) {\n\n          // If there was a database error, return an error status.\n          if (err) { res.send(err, 500); } \n\n          // Otherwise, use the returned data to render an HTML page.\n          else {\n            res.render(\n              'one-candidate', // TODO: change to name of your HTML template.\n              { item: item, related_items: items }\n            );\n          }\n        });\n      }\n    });\n  }\n);\n\n\n// Handle GET of the \"index\" resource.\napp.get('/', function(req, res) { res.render('index'); });\n\n// Start listening for incoming HTTP connections.\napp.listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":10040}]],"length":10040}
{"contributors":[],"silentsave":false,"ts":1366138672904,"patch":[[{"diffs":[[0," = '"],[-1,"ryanshaw'; // TODO: Insert GitHub username or group name."],[1,"sunithamisra'; "],[0,"\n\n//"]],"start1":328,"start2":328,"length1":65,"length2":23}]],"length":9998,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366853445263,"patch":[[{"diffs":[[0,"/\napp.put('/"],[-1,"p"],[0,"arti"],[-1,"e"],[1,"st"],[0,"s/:id',     "]],"start1":1298,"start2":1298,"length1":30,"length2":30},{"diffs":[[0,"   item.type = '"],[-1,"p"],[0,"art"],[-1,"y"],[1,"ist"],[0,"'; // TODO: chan"]],"start1":1611,"start2":1611,"length1":37,"length2":38},{"diffs":[[0,"se, "],[-1,"send"],[1,"redirect"],[0," back "],[1,"to "],[0,"the "],[-1,"location of the created/updated item.\n      else { res.send('', { Location: '/parties/' + item_id }, 204"],[1,"URI from which the form was submitted.\n      else { res.redirect('back' "],[0,"); }"]],"start1":1914,"start2":1914,"length1":126,"length2":101},{"diffs":[[0,"p.get('/"],[-1,"p"],[0,"arti"],[-1,"e"],[1,"st"],[0,"s/',    "]],"start1":2358,"start2":2358,"length1":22,"length2":22},{"diffs":[[0,"ar item_type = '"],[-1,"p"],[0,"art"],[-1,"y"],[1,"ist"],[0,"'; // TODO: chan"]],"start1":2456,"start2":2456,"length1":37,"length2":38},{"diffs":[[0,"  'list-"],[-1,"p"],[0,"arti"],[-1,"e"],[1,"st"],[0,"s',   //"]],"start1":2851,"start2":2851,"length1":22,"length2":22},{"diffs":[[0,"function(err"],[-1,", item"],[1,""],[0,") {\n\n      /"]],"start1":3713,"start2":3713,"length1":30,"length2":24},{"diffs":[[0,"se, "],[-1,"send back the location of the created item"],[1,"redirect back to the URI from which the form was submitted"],[0,".\n  "]],"start1":3857,"start2":3857,"length1":50,"length2":66},{"diffs":[[0,"res."],[-1,"send('', { Location: '/candidates/' + item.id }, 204"],[1,"redirect('back' "],[0,"); }"]],"start1":3934,"start2":3934,"length1":60,"length2":24},{"diffs":[[0,"se, "],[-1,"send back the location of the updated item.\n      else { res.send('', { Location: '/candidates/' + item_id }, 204"],[1,"redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' "],[0,"); }"]],"start1":4911,"start2":4911,"length1":121,"length2":101}]],"length":9929,"saved":false}
{"ts":1366853757561,"patch":[[{"diffs":[[0,"\napp.post('/"],[-1,"candidate"],[1,"album"],[0,"s/', // TODO"]],"start1":3307,"start2":3307,"length1":33,"length2":29},{"diffs":[[0,"tem.type = '"],[-1,"candidate"],[1,"album"],[0,"'; // TODO: "]],"start1":3540,"start2":3540,"length1":33,"length2":29},{"diffs":[[0,"/\napp.put('/"],[-1,"candidate"],[1,"album"],[0,"s/:id', // T"]],"start1":4289,"start2":4289,"length1":33,"length2":29},{"diffs":[[0,"tem.type = '"],[-1,"candidate"],[1,"album"],[0,"'; // TODO: "]],"start1":4597,"start2":4597,"length1":33,"length2":29},{"diffs":[[0,"p.get('/"],[-1,"candidate"],[1,"album"],[0,"s/',    "]],"start1":5339,"start2":5339,"length1":25,"length2":21},{"diffs":[[0,"tem_type = '"],[-1,"candidate"],[1,"album"],[0,"'; // TODO: "]],"start1":5441,"start2":5441,"length1":33,"length2":29},{"diffs":[[0,"  'list-"],[-1,"candidate"],[1,"album"],[0,"s', // T"]],"start1":5842,"start2":5842,"length1":25,"length2":21},{"diffs":[[0,"p.get('/"],[-1,"p"],[0,"arti"],[-1,"e"],[1,"st"],[0,"s/:id', "]],"start1":6379,"start2":6379,"length1":22,"length2":22},{"diffs":[[0,"ar item_type = '"],[-1,"p"],[0,"art"],[-1,"y"],[1,"ist"],[0,"'; // TODO: chan"]],"start1":6476,"start2":6476,"length1":37,"length2":38},{"diffs":[[0,"ted_type = '"],[-1,"candidate"],[1,"album"],[0,"'; // TODO: "]],"start1":7048,"start2":7048,"length1":33,"length2":29},{"diffs":[[0,"p.get('/"],[-1,"candidate"],[1,"album"],[0,"s/:id', "]],"start1":8453,"start2":8453,"length1":25,"length2":21},{"diffs":[[0,"type = '"],[-1,"candidate"],[1,"album"],[0,"'; // TO"]],"start1":8558,"start2":8558,"length1":25,"length2":21},{"diffs":[[0,"type = '"],[-1,"p"],[0,"art"],[-1,"y"],[1,"ist"],[0,"'; // TO"]],"start1":9124,"start2":9124,"length1":21,"length2":22},{"diffs":[[0,"   'one-"],[-1,"candidate"],[1,"album"],[0,"', // TO"]],"start1":9530,"start2":9530,"length1":25,"length2":21}]],"length":9887,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366900400881,"patch":[[{"diffs":[[0,"q.params.id;\n  \n"],[1,"    console.log(\"AAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n"],[0,"    // Get one i"]],"start1":6605,"start2":6605,"length1":32,"length2":80}]],"length":9935,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366993635015,"patch":[[{"diffs":[[0,"AAAAAAAA"],[-1,"\""],[1," Getting an Artist, item_id: \", item_id"],[0,");\n    /"]],"start1":6657,"start2":6657,"length1":17,"length2":55},{"diffs":[[0,".params.id;\n"],[1,"    \n    console.lg(\"LLLLLLLLLLL Getting albums: id = \", item_id)\n"],[0,"  \n    // Ge"]],"start1":8765,"start2":8765,"length1":24,"length2":90}]],"length":10039,"saved":false}
{"ts":1366994507068,"patch":[[{"diffs":[[0,"item you want.\n\n"],[1,"    console.log(\"GGGGGetting albums\")\n"],[0,"    // Get items"]],"start1":5492,"start2":5492,"length1":32,"length2":70}]],"length":10077,"saved":false}
{"ts":1366994993073,"patch":[[{"diffs":[[0,"ews/one-"],[-1,"party"],[1,"album"],[0,".ejs`.\n "]],"start1":3484,"start2":3484,"length1":21,"length2":21},{"diffs":[[0,"one-"],[-1,"candidate"],[1,"artist"],[0,".ejs"]],"start1":4541,"start2":4541,"length1":17,"length2":14},{"diffs":[[0,"q.query."],[-1,"party"],[1,"album"],[0," = item_"]],"start1":7315,"start2":7315,"length1":21,"length2":21},{"diffs":[[0,"   'one-"],[-1,"party"],[1,"album"],[0,"', // TO"]],"start1":7905,"start2":7905,"length1":21,"length2":21}]],"length":10074,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367275647578,"patch":[[{"diffs":[[0,"req.params.id;\n\n"],[1,"    //console.log(\"PPPPutting albums\")\n"],[0,"    // Get the i"]],"start1":4436,"start2":4436,"length1":32,"length2":71}]],"length":10113,"saved":false}
{"ts":1367275674900,"patch":[[{"diffs":[[0,"d;\n\n    "],[-1,"//"],[0,"console."]],"start1":4448,"start2":4448,"length1":18,"length2":16}]],"length":10111,"saved":false}
{"ts":1367275764027,"patch":[[{"diffs":[[0," item you want\n\n"],[1,"    console.log(\"POOOOOOsting albums\")\n"],[0,"    // Save the "]],"start1":3590,"start2":3590,"length1":32,"length2":71}]],"length":10150,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367276448675,"patch":[[{"diffs":[[0,".item;\n    \n"],[1,"    console.log(\"PUTTTTTTTting ARTISTS\")\n"],[0,"    item.typ"]],"start1":1598,"start2":1598,"length1":24,"length2":65},{"diffs":[[0,"on(err, items) {"],[1,"\n        \n      console.log(\"GETTTTTTTting ARTISTS\", items)"],[0,"\n\n      // If th"]],"start1":2662,"start2":2662,"length1":32,"length2":91}]],"length":10250,"saved":false}
{"ts":1367276476427,"patch":[[{"diffs":[[0,"ARTISTS\""],[1,", item_id"],[0,")\n    it"]],"start1":1641,"start2":1641,"length1":16,"length2":25}]],"length":10259,"saved":false}
{"ts":1367281065140,"patch":[[{"diffs":[[0,"onsole.l"],[1,"o"],[0,"g(\"LLLLL"]],"start1":9007,"start2":9007,"length1":16,"length2":17}]],"length":10260,"saved":false}
{"ts":1367282146469,"patch":[[{"diffs":[[0,"GGGetting albums"],[-1,"\""],[1,": req.query: \", req.query"],[0,")\n    // Get ite"]],"start1":5709,"start2":5709,"length1":33,"length2":57}]],"length":10284,"saved":false}
{"ts":1367282916663,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"PPPPutting albums\")"],[0,"\n   "]],"start1":4600,"start2":4600,"length1":40,"length2":8},{"diffs":[[0,"= req.body.item;"],[1,"\n    \n    console.log(\"PPPPutting albums: ID: \", item_id, item)"],[0,"\n\n    item.type "]],"start1":4724,"start2":4724,"length1":32,"length2":95}]],"length":10315,"saved":false}
{"ts":1367284356256,"patch":[[{"diffs":[[0,"= \", item_id"],[1,", req.query"],[0,")\n  \n    // "]],"start1":9105,"start2":9105,"length1":24,"length2":35}]],"length":10326,"saved":false}
{"ts":1367288265952,"patch":[[{"diffs":[[0," item_id"],[-1,", req.query"],[0,")\n  \n   "]],"start1":9109,"start2":9109,"length1":27,"length2":16},{"diffs":[[0,"elated_type = 'a"],[-1,"rtist"],[1,"lbum"],[0,"'; // TODO: chan"]],"start1":9545,"start2":9545,"length1":37,"length2":36}]],"length":10314,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367327498118,"patch":[[{"diffs":[[0,"          'one-a"],[-1,"lbum"],[1,"rtist"],[0,"', // TODO: chan"]],"start1":8138,"start2":8138,"length1":36,"length2":37}]],"length":10315,"saved":false}
{"ts":1367331787865,"patch":[[{"diffs":[[0,"elated_type = 'a"],[-1,"lbum"],[1,"rtist"],[0,"'; // TODO: chan"]],"start1":7406,"start2":7406,"length1":36,"length2":37}]],"length":10316,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367332109104,"patch":[[{"diffs":[[0,"elated_type = 'a"],[-1,"rtist"],[1,"lbum"],[0,"'; // TODO: chan"]],"start1":7406,"start2":7406,"length1":37,"length2":36},{"diffs":[[0,"         else {\n"],[1,"            console.log(\"CCCCCCCCCCCALLING one-artist: item:\", item)\n"],[0,"            res."]],"start1":8096,"start2":8096,"length1":32,"length2":101}]],"length":10384,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367350356814,"patch":[[{"diffs":[[0,"    });\n  }\n);\n\n"],[1,"app.get('/playlists/',         // TODO: change to suit your URI design. \n  function(req, res) {\n\n    var item_type = 'playlist'; // TODO: change to the type of item you want.\n\n    // Get all items of the specified type from the database.\n    db.getAll(item_type, function(err, items) {\n        \n      console.log(\"GETTTTTTTting PLAYLISTSSSSSSSSSS\", items)\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n\n      // Otherwise, use the returned data to render an HTML page.\n      else {\n        res.render(\n          'playlist',   // TODO: change to the name of your HTML template.\n          { items: items }\n        );\n      }\n    });\n  }\n);\n\n"],[0,"////////////////"]],"start1":3077,"start2":3077,"length1":32,"length2":730}]],"length":11082,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367365437094,"patch":[[{"diffs":[[0,"playlist"],[-1,"s"],[0,"/',     "]],"start1":3103,"start2":3103,"length1":17,"length2":16}]],"length":11081,"saved":false}
{"ts":1367365540024,"patch":[[{"diffs":[[0,"item you want.\n\n"],[1,"    console.log(\"GGGGGGGGGG\")\n"],[0,"    // Get all i"]],"start1":3252,"start2":3252,"length1":32,"length2":62}]],"length":11111,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367694918045,"patch":[[{"diffs":[[0,"eq, res) {\n\n    "],[1,"//"],[0,"var item_type = "]],"start1":3177,"start2":3177,"length1":32,"length2":34},{"diffs":[[0,"f item you want."],[1,"\n    var item_type = 'album';"],[0,"\n\n    console.lo"]],"start1":3252,"start2":3252,"length1":32,"length2":61}]],"length":11142,"saved":false}
{"ts":1367720822786,"patch":[[{"diffs":[[0,"ms.id;\n\n"],[-1,"    \n"],[0,"    // G"]],"start1":5350,"start2":5350,"length1":21,"length2":16}]],"length":11137,"saved":false}
{"ts":1367722996181,"patch":[[{"diffs":[[0,"    });\n  }\n);\n\n"],[1,"////////////////////////////////////////////////////////////////////////////////\n// Example of handling PUT to create or update a resource. /////////////////////\n// Here we create or update an item using the ID specified in the URI. /////////\n////////////////////////////////////////////////////////////////////////////////\napp.put('/playlist/:id',      // TODO: change to suit your URI design.\n  function(req, res) {\n  \n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n\n    // Get the item info that was PUT from the input form.\n    // See the form in `views/list-parties.ejs`.\n    var item = req.body.item;\n    \n    console.log(\"PUTTTTTTTting Playlist\", item_id)\n    item.type = 'playlist'; // TODO: change to the type of item you want\n\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' ); }\n    });\n  }\n);\n\n\n"],[0,"////////////////"]],"start1":2066,"start2":2066,"length1":32,"length2":1143},{"diffs":[[0,"///////////////\n"],[-1,""],[0,"// Here we list "]],"start1":3339,"start2":3339,"length1":32,"length2":32},{"diffs":[[0," {\n\n    "],[-1,"//"],[0,"var item"]],"start1":4296,"start2":4296,"length1":18,"length2":16},{"diffs":[[0,"ar item_type"],[1,"_playlist"],[0," = 'playlist"]],"start1":4305,"start2":4305,"length1":24,"length2":33},{"diffs":[[0,"   var item_type"],[1,"_album"],[0," = 'album';\n\n   "]],"start1":4388,"start2":4388,"length1":32,"length2":38},{"diffs":[[0,"m the database.\n"],[-1,""],[0,"    db.getAll(it"]],"start1":4499,"start2":4499,"length1":32,"length2":32},{"diffs":[[0,"getAll(item_type"],[1,"_album"],[0,", function(err, "]],"start1":4522,"start2":4522,"length1":32,"length2":38}]],"length":12267,"saved":false}
{"ts":1367723134141,"patch":[[{"diffs":[[0,"em_type_"],[-1,"album"],[1,"playlist"],[0,", functi"]],"start1":4531,"start2":4531,"length1":21,"length2":24}]],"length":12270,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367726049656,"patch":[[{"diffs":[[0,"///////////////\n"],[1,"//"],[0,"app.put('/playli"]],"start1":2390,"start2":2390,"length1":32,"length2":34},{"diffs":[[0,"our URI design.\n"],[1,"app.put('/playlist/',  \n"],[0,"  function(req, "]],"start1":2463,"start2":2463,"length1":32,"length2":56}]],"length":12296,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367772018229,"patch":[[{"diffs":[[0,"playlist/', "],[1,"'/albums/',"],[0,"        // T"]],"start1":4240,"start2":4240,"length1":24,"length2":35}]],"length":12307,"saved":false}
{"ts":1367772181036,"patch":[[{"diffs":[[0,"ylist', "],[1,"'albums',"],[0,"  // TOD"]],"start1":4898,"start2":4898,"length1":16,"length2":25},{"diffs":[[0,"  { items: items"],[-1," "],[1,", album_items:items"],[0,"}\n        );\n   "]],"start1":4976,"start2":4976,"length1":33,"length2":51}]],"length":12334,"saved":false}
{"ts":1367772530013,"patch":[[{"diffs":[[0,"st',"],[-1," 'albums',"],[0,"  //"]],"start1":4901,"start2":4901,"length1":18,"length2":8},{"diffs":[[0,"s: items"],[-1,", "],[1,"} , 'albums', {"],[0,"album_it"]],"start1":4974,"start2":4974,"length1":18,"length2":31}]],"length":12337,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367870677777,"patch":[[{"diffs":[[0,"= req.params.id;"],[1,"\n    \n    var item_type_playlist = 'playlist';\n    var item_type_album = 'album'; "],[0,"\n\n    // Get the"]],"start1":2582,"start2":2582,"length1":32,"length2":114},{"diffs":[[0,"ylist\", item"],[-1,"_id"],[0,")"],[1,";"],[0,"\n    item.ty"]],"start1":2859,"start2":2859,"length1":28,"length2":26},{"diffs":[[0,"ant\n"],[-1,"\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' ); }\n    });\n  }\n);\n"],[1,"    \n    db.getAll(item_type_playlist, function(err, playlist_items) {\n        \n      db.getAll(item_type_album, function(err, album_items) {\n       album_items.type = 'album';\n       var albun_length = album_items.length;\n       var playlist_length = playlist_items.length;\n       \n       //playlist_items.forEach(function(album_item) {\n       console.log(\"AAAALBUM_ITEM_LENGTH: \", album_items.length);\n       console.log(\"PPPPLAYLIST_ITEM_LENGTH: \", playlist_items.length);\n       console.log(\"IIIIitem.name = \", item.name);\n       //console.log(\"LLLLalbum_items.name = \", album_items[length-1].name);\n       /*\n       while(length) {\n          if (item.name == album_items[length-1].name) {\n             console.log(\"RRRRRRRRR ALREADY EXISTS in the PLAYLIST: \", item.name);\n             \n            return;\n          }\n          length--;   \n       }*/\n       // Return if item is alrady in the playlist\n       for (var i = 0; i < playlist_items.length; i++) {\n           if (item.name == playlist_items[i].name) { \n             console.log(\"RRRRRRi=%d, playlistlen=%d, pl_name=%s\", i, playlist_items[i].length, playlist_items[i].name);\n             return;\n           }\n       }\n       console.log(\"PLAYLIST LENGTH: \", playlist_length);\n       \n       // Return if item is not in the album\n       for (i=0; i<album_items.length; i++) {\n           if (item.name == album_items.name) {\n               console.log(\"rrrr Found the item %s in the album\", item.name);\n               break;\n           }\n       }\n     // If i is the length of the album, the item doesn't exist. So return.\n     if (i >= album_items.length) {\n         console.log(\"ppppp item %s not found in the album\", item.name);\n         return;\n     }\n       \n     }); \n    });\n\n    console.log(\"SAVING IN DB \", item.name);\n    // Save the new item to the database, specifying the ID.\n    db.save(item_id, item, function(err) {\n\n      // If there was a database error, return an error status.\n      if (err) { res.send(err, 500); } \n      \n      // Otherwise, redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' ); }\n    });\n  }\n);\n\n// Delete the entire playlist\napp.delete('/playlist/',\n  function(req, res) {\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n    \n    // Get the item info that was PUT from the input form.\n    // See the form in `views/one-artist.ejs`.\n    var item = req.body.item;\n    \n    item.type = 'playlist';\n    \n    db.remove(item_id, item, function(err) {\n       // If there was a database error, return an error status.\n\n      if (err) { res.send(err, 500); }\n      \n      // Otherwise, redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' ); }\n    }); \n  }\n)\n\napp.delete('/albums/:id',\n  function(req, res) {\n    // Get the item ID from the URI.\n    var item_id = req.params.id;\n    \n    // Get the item info that was PUT from the input form.\n    // See the form in `views/one-artist.ejs`.\n    var item = req.body.item;\n    \n    item.type = 'album';\n    \n    db.remove(item_id, item, function(err) {\n       // If there was a database error, return an error status.\n\n      if (err) { res.send(err, 500); }\n      \n      // Otherwise, redirect back to the URI from which the form was submitted.\n      else { res.redirect('back' ); }\n    }); \n  }\n)"],[0,"\n\n//"]],"start1":2943,"start2":2943,"length1":358,"length2":3352},{"diffs":[[0,"  }\n);\n\n"],[1,"//"],[0,"app.get("]],"start1":7296,"start2":7296,"length1":16,"length2":18},{"diffs":[[0,"ur URI design. \n"],[1,"app.get('/playlist/',  \n"],[0,"  function(req, "]],"start1":7373,"start2":7373,"length1":32,"length2":56},{"diffs":[[0,"GGGGGG\")"],[-1,""],[0,""],[1,";"],[0,"\n    // "]],"start1":7581,"start2":7581,"length1":16,"length2":17},{"diffs":[[0,"r, items) {\n    "],[1,"  db.getAll(item_type_album, function(err, album_items) {"],[0,"    \n"],[1,"  "],[0,"      console.lo"]],"start1":7698,"start2":7698,"length1":37,"length2":96},{"diffs":[[0,"SSSSSSS\""],[-1,", items)\n\n"],[1,");\n  "],[0,"      //"]],"start1":7822,"start2":7822,"length1":26,"length2":21},{"diffs":[[0,"n error status.\n"],[1,"  "],[0,"      if (err) {"]],"start1":7883,"start2":7883,"length1":32,"length2":34},{"diffs":[[0,"500); } \n\n      "],[1,"  "],[0,"// Otherwise, us"]],"start1":7932,"start2":7932,"length1":32,"length2":34},{"diffs":[[0,"TML page.\n      "],[1,"  "],[0,"else {\n        r"]],"start1":8000,"start2":8000,"length1":32,"length2":34},{"diffs":[[0," else {\n        "],[1," "],[1," //"],[0,"res.render(\n    "]],"start1":8017,"start2":8017,"length1":32,"length2":36},{"diffs":[[0,"        "],[1," //"],[0,"'playlis"]],"start1":8051,"start2":8051,"length1":16,"length2":19},{"diffs":[[0,"plate.\n         "],[1,"  //"],[0," { items: items}"]],"start1":8119,"start2":8119,"length1":32,"length2":36},{"diffs":[[0,":items}\n        "],[1," "],[1," //"],[0,");\n      }\n    }"]],"start1":8180,"start2":8180,"length1":32,"length2":36},{"diffs":[[0,"     //);\n      "],[-1,"}"],[1,"    res.render('playlist', {items: items, albums: album_items });\n        }\n      });"],[0,"\n    });\n  }\n);\n"]],"start1":8193,"start2":8193,"length1":33,"length2":117}]],"length":15597,"saved":false}
{"ts":1367870702115,"patch":[[{"diffs":[[0,"{ res.redirect('"],[-1,"back"],[1,"\\"],[0,"' ); }\n    }); \n"]],"start1":5664,"start2":5664,"length1":36,"length2":33},{"diffs":[[0,"{ res.redirect('"],[-1,"back"],[1,"\\"],[0,"' ); }\n    }); \n"]],"start1":6247,"start2":6247,"length1":36,"length2":33}]],"length":15591,"saved":false}
{"ts":1367870744236,"patch":[[{"diffs":[[0,"{ res.redirect('"],[-1,"\\"],[1,"back"],[0,"' ); }\n    }); \n"]],"start1":5664,"start2":5664,"length1":33,"length2":36},{"diffs":[[0,"ct('"],[-1,"\\"],[1,"back"],[0,"' );"]],"start1":6262,"start2":6262,"length1":9,"length2":12}]],"length":15597,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367889560674,"patch":[[{"diffs":[[0,".body.item;\n    "],[1," "],[0,"\n    console.log"]],"start1":2808,"start2":2808,"length1":32,"length2":33},{"diffs":[[0,"onsole.log(\""],[-1,"PUTTTTTT"],[1,"Debug: PU"],[0,"Tting Playli"]],"start1":2831,"start2":2831,"length1":32,"length2":33},{"diffs":[[0,"t'; "],[-1,"// TODO: change to the type of item you want"],[0,"\n   "]],"start1":2900,"start2":2900,"length1":52,"length2":8},{"diffs":[[0,"le.log(\""],[-1,"AAA"],[1,"Debug: "],[0,"ALBUM_IT"]],"start1":3255,"start2":3255,"length1":19,"length2":23},{"diffs":[[0,"le.log(\""],[-1,"PPP"],[1,"Debug: "],[0,"PLAYLIST"]],"start1":3325,"start2":3325,"length1":19,"length2":23},{"diffs":[[0,"og(\""],[-1,"IIIIitem.name = \", item.name);\n       //console.log(\"LLLLalbum_items.name = \", album_items[length-1].name);\n       /*\n       while(length) {\n          if (item.name == album_items[length-1].name) {\n             console.log(\"RRRRRRRRR ALREADY EXISTS in the PLAYLIST: \", item.name);\n             \n            return;\n          }\n          length--;   \n       }*/"],[1,"Debug: Item.name = \", item.name);\n      "],[0,"\n   "]],"start1":3405,"start2":3405,"length1":368,"length2":48},{"diffs":[[0,"og(\""],[-1,"RRRRRR"],[1,"Present in the Playlist: "],[0,"i=%d"]],"start1":3635,"start2":3635,"length1":14,"length2":33},{"diffs":[[0,"  }\n"],[-1,"       console.log(\"PLAYLIST LENGTH: \", playlist_length);\n"],[0,"    "]],"start1":3792,"start2":3792,"length1":66,"length2":8},{"diffs":[[0,"og(\""],[-1,"rrrr "],[0,""],[1,""],[0,"Foun"]],"start1":3967,"start2":3967,"length1":13,"length2":8},{"diffs":[[0,"og(\""],[-1,"ppppp "],[0,""],[1,""],[0,"item"]],"start1":4190,"start2":4190,"length1":14,"length2":8}]],"length":15193,"saved":false}
{"ts":1367889597404,"patch":[[{"diffs":[[0,"og(\""],[-1,"PUTTTTTT"],[1,"Debug: PU"],[0,"Ttin"]],"start1":1623,"start2":1623,"length1":16,"length2":17}]],"length":15194,"saved":false}
{"ts":1367890556207,"patch":[[{"diffs":[[0,"   \n"],[-1,"    console.log(\"Debug: PUTting ARTISTS\", item_id)\n"],[0,"    "]],"start1":1606,"start2":1606,"length1":59,"length2":8},{"diffs":[[0,"f item you want\n"],[1,""],[0,"\n    // Save the"]],"start1":1665,"start2":1665,"length1":32,"length2":32},{"diffs":[[0,"le.log(\""],[1,"Debug: "],[0,"SAVING I"]],"start1":4249,"start2":4249,"length1":16,"length2":23},{"diffs":[[0,"';\n\n"],[-1,"    console.log(\"GGGGGGGGGG\");\n"],[0,"    "]],"start1":7109,"start2":7109,"length1":39,"length2":8},{"diffs":[[0,"   \n"],[-1,"        console.log(\"GETTTTTTTting PLAYLISTSSSSSSSSSS\");\n"],[0,"    "]],"start1":7294,"start2":7294,"length1":65,"length2":8},{"diffs":[[0,"nt\n\n"],[-1,"    console.log(\"POOOOOOsting albums\")\n"],[0,"    "]],"start1":8394,"start2":8394,"length1":47,"length2":8},{"diffs":[[0,"tem;"],[-1,"\n    \n    console.log(\"PPPPutting albums: ID: \", item_id, item)"],[0,"\n\n  "]],"start1":9375,"start2":9375,"length1":71,"length2":8},{"diffs":[[0,"t.\n\n"],[-1,"    console.log(\"GGGGGetting albums: req.query: \", req.query)\n"],[0,"    "]],"start1":10293,"start2":10293,"length1":70,"length2":8},{"diffs":[[0,"\n  \n"],[-1,"    console.log(\"AAAAAAAAAAAAAAAAAAAAAAAAAAA Getting an Artist, item_id: \", item_id);"],[0,"\n"],[1,""],[0,"    "]],"start1":11406,"start2":11406,"length1":94,"length2":9},{"diffs":[[0,"e {\n"],[-1,"            console.log(\"CCCCCCCCCCCALLING one-artist: item:\", item)\n"],[0,"    "]],"start1":12537,"start2":12537,"length1":77,"length2":8},{"diffs":[[0,"D from the URI.\n"],[1,""],[0,"    var item_id "]],"start1":13433,"start2":13433,"length1":32,"length2":32},{"diffs":[[0,"id;\n"],[-1,"    \n    console.log(\"LLLLLLLLLLL Getting albums: id = \", item_id)\n"],[0,"  \n "]],"start1":13478,"start2":13478,"length1":75,"length2":8}]],"length":14677,"saved":false}
{"ts":1367890599760,"patch":[[{"diffs":[[0,"s) {"],[-1,"\n        \n      console.log(\"GETTTTTTTting ARTISTS\", items)"],[0,"\n\n  "]],"start1":6447,"start2":6447,"length1":67,"length2":8}]],"length":14618,"saved":false}
{"ts":1367893095628,"patch":[[{"diffs":[[0,"f item you want."],[1,"\n    //var item_type_artist = 'artist';"],[0,"\n\n    // Get the"]],"start1":13335,"start2":13335,"length1":32,"length2":71},{"diffs":[[0,"on(err, item) {\n"],[1,"     // db.getOne(item_type_artist, item_id, function(err, item_artist) {\n"],[0,"        \n      /"]],"start1":13575,"start2":13575,"length1":32,"length2":106}]],"length":14731,"saved":false}
{"ts":1367893181902,"patch":[[{"diffs":[[0,"       \n        "],[1,"//"],[0,"var related_type"]],"start1":13941,"start2":13941,"length1":32,"length2":34},{"diffs":[[0,"of related item."],[1,"\n        var related_type = 'artist'; // TODO: change to type of related item."],[0,"\n\n        // Get"]],"start1":14011,"start2":14011,"length1":32,"length2":110}]],"length":14811,"saved":false}
{"ts":1367896851074,"patch":[[{"diffs":[[0,"   \n"],[-1,"        //var related_type = 'album'; // TODO: change to type of related item.\n"],[0,"    "]],"start1":13945,"start2":13945,"length1":87,"length2":8}]],"length":14732,"saved":false}
